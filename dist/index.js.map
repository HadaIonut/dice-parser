{"version":3,"file":"index.js","sources":["../src/parser/ParserCommon.ts","../src/random-numbers/JavascriptRandom.ts","../src/parser/ParserSync.ts","../src/index.ts"],"sourcesContent":["const diceRollsCache: Map<string, number[]> = new Map<string, number[]>()\nexport const getCacheMap = (): Map<string, number[]> => diceRollsCache\n\nexport const hasCache = (id: string): boolean => diceRollsCache.has(id) && !!diceRollsCache.get(id)?.length\nexport const addToCache = (id: string, values: number[]): number | undefined => {\n  const newValues = [...values]\n\n  const value = newValues.pop()\n  diceRollsCache.set(id, newValues)\n\n  return value\n}\nexport const getFromCache = (id: string): number | undefined => {\n  if (!hasCache(id)) return undefined\n\n  const values: number[] = [...(diceRollsCache.get(id) || [])]\n  const value = values.pop()\n\n  diceRollsCache.set(id, values)\n  return value\n}\n","import type {RandomIntegerParamsType} from '../types'\n\nconst getRandomInclusive = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1) + min)\nexport const getRandomIntegers = ({num = 100, min = 1, max = 20}: RandomIntegerParamsType = {}): number[] => Array.from({length: num}, () => getRandomInclusive(min, max))\n","import {hasCache, getFromCache, addToCache} from './ParserCommon'\nimport {getRandomIntegers} from '../random-numbers/JavascriptRandom'\n\nexport const getDiceRollSync = (dice: number): number => {\n  const id = `${dice}`\n\n  const isCached: boolean = hasCache(id)\n  if (isCached) return getFromCache(id) as number\n\n  const generatedValues: number[] = getRandomIntegers({max: dice})\n  return addToCache(id, generatedValues) as number\n}\n","import {getCacheMap} from './parser/ParserCommon'\nimport {getDiceRollAsync} from './parser/ParserAsync'\nimport {getDiceRollSync} from './parser/ParserSync'\n\n(async () => {\n  console.log(getCacheMap().get('20'))\n  console.log((await getDiceRollSync(20)))\n  console.log(getCacheMap().get('20'))\n  console.log((await getDiceRollSync(20)))\n  console.log(getCacheMap().get('20'))\n  console.log((await getDiceRollSync(20)))\n  console.log(getCacheMap().get('20'))\n})()\n\nexport { }\n"],"names":["diceRollsCache","getCacheMap","hasCache","id","_a","addToCache","values","newValues","value","getFromCache","getRandomInclusive","min","max","getRandomIntegers","num","getDiceRollSync","dice","generatedValues"],"mappings":"AAAA,MAAMA,wBAA4C,OACrCC,IAAc,MAA6BD,GAE3CE,IAAW,CAACC;AAHzB,MAAAC;AAGiD,SAAAJ,EAAe,IAAIG,CAAE,KAAK,CAAC,GAACC,IAAAJ,EAAe,IAAIG,CAAE,MAArB,QAAAC,EAAwB;AAAA,GACxFC,IAAa,CAACF,GAAYG,MAAyC;AACxE,QAAAC,IAAY,CAAC,GAAGD,CAAM,GAEtBE,IAAQD,EAAU;AACT,SAAAP,EAAA,IAAIG,GAAII,CAAS,GAEzBC;AACT,GACaC,IAAe,CAACN,MAAmC;AAC1D,MAAA,CAACD,EAASC,CAAE;AAAU;AAEpB,QAAAG,IAAmB,CAAC,GAAIN,EAAe,IAAIG,CAAE,KAAK,CAAA,CAAG,GACrDK,IAAQF,EAAO;AAEN,SAAAN,EAAA,IAAIG,GAAIG,CAAM,GACtBE;AACT,GClBME,IAAqB,CAACC,GAAaC,MAAwB,KAAK,MAAM,KAAK,OAAA,KAAYA,IAAMD,IAAM,KAAKA,CAAG,GACpGE,IAAoB,CAAC,EAAC,KAAAC,IAAM,KAAK,KAAAH,IAAM,GAAG,KAAAC,IAAM,OAA+B,CAAA,MAAiB,MAAM,KAAK,EAAC,QAAQE,EAAA,GAAM,MAAMJ,EAAmBC,GAAKC,CAAG,CAAC,GCA5JG,IAAkB,CAACC,MAAyB;AACvD,QAAMb,IAAK,GAAGa;AAGV,MADsBd,EAASC,CAAE;AACvB,WAAOM,EAAaN,CAAE;AAEpC,QAAMc,IAA4BJ,EAAkB,EAAC,KAAKG,EAAK,CAAA;AACxD,SAAAX,EAAWF,GAAIc,CAAe;AACvC;AAAA,CCPC,aACC,QAAQ,IAAIhB,EAAA,EAAc,IAAI,IAAI,CAAC,GACnC,QAAQ,IAAK,MAAMc,EAAgB,EAAE,CAAE,GACvC,QAAQ,IAAId,EAAA,EAAc,IAAI,IAAI,CAAC,GACnC,QAAQ,IAAK,MAAMc,EAAgB,EAAE,CAAE,GACvC,QAAQ,IAAId,EAAA,EAAc,IAAI,IAAI,CAAC,GACnC,QAAQ,IAAK,MAAMc,EAAgB,EAAE,CAAE,GACvC,QAAQ,IAAId,EAAA,EAAc,IAAI,IAAI,CAAC,IAClC;"}