{"version":3,"file":"index.js","sources":["../src/random-number-generators/JavascriptRandom.ts","../src/parsers/RollsProvider.ts","../src/parsers/Parser.ts","../src/index.ts"],"sourcesContent":["import type {RandomIntegerParamsType} from '../types'\r\n\r\nconst getRandomInclusive = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1) + min)\r\nexport const getRandomIntegers = ({num = 20, min = 1, max = 20}: RandomIntegerParamsType = {}): number[] => Array.from({length: num}, () => getRandomInclusive(min, max))\r\n","import {getRandomIntegers} from '../random-number-generators/JavascriptRandom'\r\n\r\nconst diceRollsCache: Map<number, number[]> = new Map<number, number[]>()\r\n\r\nconst hasCache = (id: number): boolean => diceRollsCache.has(id) && !!diceRollsCache.get(id)?.length\r\nconst addToCache = (id: number, values: number[]): number | undefined => {\r\n  const newValues = [...values]\r\n\r\n  const value = newValues.pop()\r\n  diceRollsCache.set(id, newValues)\r\n\r\n  return value\r\n}\r\nconst getFromCache = (id: number): number | undefined => {\r\n  if (!hasCache(id)) return undefined\r\n\r\n  const values: number[] = [...(diceRollsCache.get(id) || [])]\r\n  const value = values.pop()\r\n\r\n  diceRollsCache.set(id, values)\r\n  return value\r\n}\r\n\r\nexport const getDiceRoll = (dice: number): number => {\r\n  const isCached: boolean = hasCache(dice)\r\n  if (isCached) return getFromCache(dice) as number\r\n\r\n  const generatedValues: number[] = getRandomIntegers({max: dice})\r\n  return addToCache(dice, generatedValues) as number\r\n}\r\nexport const getMultipleDiceRolls = (num: number, dice: number): number[] => Array.from({length: num}, () => getDiceRoll(dice))\r\n","import type { ParseResultType } from '../types'\r\nimport { getMultipleDiceRolls } from './RollsProvider'\r\n\r\nconst ALL_TYPES_OF_DICE_REGEX = /(?:\\d+d\\d+)(?:r|rr|x|xo|kh|kl|dh|dl|min|max|even|odd|cs|cf)?(?:>=|<=|>|<|=)?\\d*/gim\r\nconst STANDARD_DICE_REGEX = /^(\\d+)d(\\d+)$/gim\r\n\r\nexport const parseOriginalString = (parsedObj: ParseResultType): ParseResultType => {\r\n  const { parsed, results } = parsedObj\r\n  let parsedWithResults = parsed\r\n\r\n  let lengthChanged = 0\r\n  for (let i = 0; i < results.length; i++) {\r\n    const res = results[i];\r\n    const { m, result, start, end } = res\r\n\r\n    if (typeof result === 'undefined') continue\r\n    parsedWithResults = `${parsedWithResults.substring(0, start - lengthChanged)}${result}${parsedWithResults.substring(end - lengthChanged, parsedWithResults.length)}`\r\n    lengthChanged += m.length - `${result}`.length\r\n  }\r\n  return { ...parsedObj, parsed: parsedWithResults }\r\n}\r\n\r\nexport const standardDiceParser = (parsedObj: ParseResultType): ParseResultType => {\r\n  const parsedResults = parsedObj.results.map((result) => {\r\n    const { m } = result\r\n    if (!m.match(STANDARD_DICE_REGEX)) return result\r\n\r\n    const [_, numberOfDiceString, diceValueString] = STANDARD_DICE_REGEX.exec(m) as RegExpExecArray\r\n    const numberOfDice = Number(numberOfDiceString)\r\n    const diceValue = Number(diceValueString)\r\n\r\n    const diceRolls = getMultipleDiceRolls(numberOfDice, diceValue)\r\n    const diceSum = diceRolls.reduce((res, dice) => res + dice, 0)\r\n    return { ...result, rolls: diceRolls, result: diceSum }\r\n  })\r\n\r\n  return { ...parsedObj, results: parsedResults }\r\n}\r\n\r\nexport const parse = (text: string): ParseResultType => {\r\n  let parsedObj: ParseResultType = { original: text, parsed: text, wasSuccessful: true, results: [] }\r\n\r\n  try {\r\n    parsedObj.results = Array.from(text.matchAll(ALL_TYPES_OF_DICE_REGEX), (m) => {\r\n      const res = m[0]\r\n      const { index: start } = m\r\n      const end = start as number + res.length\r\n\r\n      return { m: res, start, end }\r\n    })\r\n\r\n    parsedObj = standardDiceParser(parsedObj)\r\n\r\n    return parseOriginalString(parsedObj)\r\n  } catch (error) {\r\n    console.error(error)\r\n    parsedObj.wasSuccessful = false\r\n    return parsedObj\r\n  }\r\n}\r\n","import {parse} from './parsers/Parser'\r\n\r\n(async () => {\r\n  const testText = `\r\n    1d2 1d2 1d4 1d6 1d8 1d10 1d12 1d20 1d100 2d20 20d20 200d20\r\n    1d10r1 1d20r<10 1d20rr<3 5d10x10 1d20x<10kh 6d10xo10 5d10xo<8x10cs>=8\r\n    3d10k 4d6k3 2d20kh 3d10kl 4d6kl3 2d20kl 3d6d 4d10d2 3d6dh 4d10min2 4d10max8\r\n    10d20cs20 10d20cs>10 6d10cs>=6 1d100cs<=20 3d6even 5d10cs>=6df=1\r\n    5d10cs>=8x=10 5d10cs>=8x>=9 10d10cs>=8x>=8 10d20cf20 10d20cf>10 6d10cf>=6\r\n    1d100cf<=20 4d6cs6df1 10d10cs>5df1 1d10cs=10df=1 3d6sf<3 3d6ms10\r\n    Ana are 1d6 mere.\r\n    Ion a luat 1d8 slashing dmg de la sapa.\r\n  `\r\n  const result = parse(testText)\r\n  console.log(result)\r\n})()\r\n\r\nexport { }\r\n"],"names":["getRandomInclusive","min","max","getRandomIntegers","num","diceRollsCache","hasCache","id","_a","addToCache","values","newValues","value","getFromCache","getDiceRoll","dice","generatedValues","getMultipleDiceRolls","ALL_TYPES_OF_DICE_REGEX","STANDARD_DICE_REGEX","parseOriginalString","parsedObj","parsed","results","parsedWithResults","lengthChanged","i","res","m","result","start","end","standardDiceParser","parsedResults","_","numberOfDiceString","diceValueString","numberOfDice","diceValue","diceRolls","diceSum","parse","text","error"],"mappings":"AAEA,MAAMA,IAAqB,CAACC,GAAaC,MAAwB,KAAK,MAAM,KAAK,OAAA,KAAYA,IAAMD,IAAM,KAAKA,CAAG,GACpGE,IAAoB,CAAC,EAAC,KAAAC,IAAM,IAAI,KAAAH,IAAM,GAAG,KAAAC,IAAM,OAA+B,CAAA,MAAiB,MAAM,KAAK,EAAC,QAAQE,EAAA,GAAM,MAAMJ,EAAmBC,GAAKC,CAAG,CAAC,GCDlKG,wBAA4C,OAE5CC,IAAW,CAACC;ADFlB,MAAAC;ACE0C,SAAAH,EAAe,IAAIE,CAAE,KAAK,CAAC,GAACC,IAAAH,EAAe,IAAIE,CAAE,MAArB,QAAAC,EAAwB;AAAA,GACxFC,IAAa,CAACF,GAAYG,MAAyC;AACjE,QAAAC,IAAY,CAAC,GAAGD,CAAM,GAEtBE,IAAQD,EAAU;AACT,SAAAN,EAAA,IAAIE,GAAII,CAAS,GAEzBC;AACT,GACMC,IAAe,CAACN,MAAmC;AACnD,MAAA,CAACD,EAASC,CAAE;AAAU;AAEpB,QAAAG,IAAmB,CAAC,GAAIL,EAAe,IAAIE,CAAE,KAAK,CAAA,CAAG,GACrDK,IAAQF,EAAO;AAEN,SAAAL,EAAA,IAAIE,GAAIG,CAAM,GACtBE;AACT,GAEaE,IAAc,CAACC,MAAyB;AAE/C,MADsBT,EAASS,CAAI;AACzB,WAAOF,EAAaE,CAAI;AAEtC,QAAMC,IAA4Bb,EAAkB,EAAC,KAAKY,EAAK,CAAA;AACxD,SAAAN,EAAWM,GAAMC,CAAe;AACzC,GACaC,IAAuB,CAACb,GAAaW,MAA2B,MAAM,KAAK,EAAC,QAAQX,EAAG,GAAG,MAAMU,EAAYC,CAAI,CAAC,GC3BxHG,IAA0B,sFAC1BC,IAAsB,oBAEfC,IAAsB,CAACC,MAAgD;AAC5E,QAAA,EAAE,QAAAC,GAAQ,SAAAC,EAAY,IAAAF;AAC5B,MAAIG,IAAoBF,GAEpBG,IAAgB;AACpB,WAASC,IAAI,GAAGA,IAAIH,EAAQ,QAAQG,KAAK;AACvC,UAAMC,IAAMJ,EAAQG,IACd,EAAE,GAAAE,GAAG,QAAAC,GAAQ,OAAAC,GAAO,KAAAC,MAAQJ;AAElC,IAAI,OAAOE,IAAW,QACtBL,IAAoB,GAAGA,EAAkB,UAAU,GAAGM,IAAQL,CAAa,IAAII,IAASL,EAAkB,UAAUO,IAAMN,GAAeD,EAAkB,MAAM,KAChJC,KAAAG,EAAE,SAAS,GAAGC,IAAS;AAAA,EAC1C;AACA,SAAO,EAAE,GAAGR,GAAW,QAAQG,EAAkB;AACnD,GAEaQ,IAAqB,CAACX,MAAgD;AACjF,QAAMY,IAAgBZ,EAAU,QAAQ,IAAI,CAACQ,MAAW;AAChD,UAAA,EAAE,GAAAD,EAAM,IAAAC;AACV,QAAA,CAACD,EAAE,MAAMT,CAAmB;AAAU,aAAAU;AAE1C,UAAM,CAACK,GAAGC,GAAoBC,CAAe,IAAIjB,EAAoB,KAAKS,CAAC,GACrES,IAAe,OAAOF,CAAkB,GACxCG,IAAY,OAAOF,CAAe,GAElCG,IAAYtB,EAAqBoB,GAAcC,CAAS,GACxDE,IAAUD,EAAU,OAAO,CAACZ,GAAKZ,MAASY,IAAMZ,GAAM,CAAC;AAC7D,WAAO,EAAE,GAAGc,GAAQ,OAAOU,GAAW,QAAQC;EAAQ,CACvD;AAED,SAAO,EAAE,GAAGnB,GAAW,SAASY,EAAc;AAChD,GAEaQ,IAAQ,CAACC,MAAkC;AAClD,MAAArB,IAA6B,EAAE,UAAUqB,GAAM,QAAQA,GAAM,eAAe,IAAM,SAAS,CAAA;AAE3F,MAAA;AACQ,WAAArB,EAAA,UAAU,MAAM,KAAKqB,EAAK,SAASxB,CAAuB,GAAG,CAACU,MAAM;AAC5E,YAAMD,IAAMC,EAAE,IACR,EAAE,OAAOE,EAAU,IAAAF,GACnBG,IAAMD,IAAkBH,EAAI;AAElC,aAAO,EAAE,GAAGA,GAAK,OAAAG,GAAO,KAAAC,EAAI;AAAA,IAAA,CAC7B,GAEDV,IAAYW,EAAmBX,CAAS,GAEjCD,EAAoBC,CAAS;AAAA,WAC7BsB;AACP,mBAAQ,MAAMA,CAAK,GACnBtB,EAAU,gBAAgB,IACnBA;AAAA,EACT;AACF;AAAA,CCzDC,YAAY;AAWL,QAAAQ,IAASY,EAVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAUY;AAC7B,UAAQ,IAAIZ,CAAM;AACpB,GAAG;"}