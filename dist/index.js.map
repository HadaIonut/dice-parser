{"version":3,"file":"index.js","sources":["../src/parser/ParserCommon.ts","../src/random-numbers/RandomOrg.ts","../src/random-numbers/JavascriptRandom.ts","../src/parser/ParserAsync.ts","../src/index.ts"],"sourcesContent":["const diceRollsCache: Map<string, number[]> = new Map<string, number[]>()\nexport const getCacheMap = (): Map<string, number[]> => diceRollsCache\n\nexport const hasCache = (id: string): boolean => diceRollsCache.has(id) && !!diceRollsCache.get(id)?.length\nexport const addToCache = (id: string, values: number[]): number | undefined => {\n  const newValues = [...values]\n\n  const value = newValues.pop()\n  diceRollsCache.set(id, newValues)\n\n  return value\n}\nexport const getFromCache = (id: string): number | undefined => {\n  if (!hasCache(id)) return undefined\n\n  const values: number[] = [...(diceRollsCache.get(id) || [])]\n  const value = values.pop()\n\n  diceRollsCache.set(id, values)\n  return value\n}\n","import type {RandomOrgRandomIntegerUrlType, RandomIntegerParamsType} from '../types'\n\nconst randomOrgQuotaUrl = (format = 'plain'): string => `https://www.random.org/quota/?format=${format}`\nconst randomOrgIntegerUrl = ({\n  num = 10, min = 1, max = 20, col = 1, base = 10, format = 'plain', rnd = 'new',\n}: RandomOrgRandomIntegerUrlType = {}): string => `https://www.random.org/integers/?num=${num}&min=${min}&max=${max}&col=${col}&base=${base}&format=${format}&rnd=${rnd}`\n\nconst getRandomOrgQuota = async (): Promise<number> => {\n  try {\n    const quotaUrl = randomOrgQuotaUrl()\n    const quotaResult = await fetch(quotaUrl)\n    const quotaText = await quotaResult.text()\n\n    return Number(quotaText)\n  } catch (error) {\n    return NaN\n  }\n}\n\nconst hasRandomOrgQuota = async (): Promise<boolean> => {\n  const quota = await getRandomOrgQuota()\n  return Number.isNaN(quota) ? false : quota > 1000\n}\n\nexport const getRandomOrgRandomIntegers = async ({num = 10, min = 1, max = 20}: RandomIntegerParamsType = {}): Promise<number[]> => {\n  const quota = await hasRandomOrgQuota()\n  if (!quota) return []\n\n  try {\n    const randomIntegerUrl = randomOrgIntegerUrl({num, min, max})\n    const randomIntegersResult = await fetch(randomIntegerUrl)\n    const randomIntegersText = await randomIntegersResult.text()\n\n    const randomIntegersArray = randomIntegersText.split('\\n')\n    return randomIntegersArray.slice(0, randomIntegersArray.length - 1).map((n) => Number(n))\n  } catch (error) {\n    return []\n  }\n}\n","import type {RandomIntegerParamsType} from '../types'\n\nconst getRandomInclusive = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1) + min)\nexport const getRandomIntegers = ({num = 100, min = 1, max = 20}: RandomIntegerParamsType = {}): number[] => Array.from({length: num}, () => getRandomInclusive(min, max))\n","import {hasCache, getFromCache, addToCache} from './ParserCommon'\nimport {getRandomOrgRandomIntegers} from '../random-numbers/RandomOrg'\nimport {getRandomIntegers} from '../random-numbers/JavascriptRandom'\n\nexport const getDiceRollAsync = async (dice: number): Promise<number> => {\n  const id = `${dice}`\n\n  const isCached: boolean = hasCache(id)\n  if (isCached) return getFromCache(id) as number\n\n  const randomOrgGeneratedValues: number[] = await getRandomOrgRandomIntegers({max: dice})\n  const generatedValues: number[] = getRandomIntegers({max: dice})\n  const valueToCache: number[] = randomOrgGeneratedValues.length ? randomOrgGeneratedValues : generatedValues\n\n  return addToCache(id, valueToCache) as number\n}\n","import {getCacheMap} from './parser/ParserCommon'\nimport {getDiceRollAsync} from './parser/ParserAsync'\n\n(async () => {\n  console.log(getCacheMap().get('20'))\n  console.log((await getDiceRollAsync(20)))\n  console.log(getCacheMap().get('20'))\n  console.log((await getDiceRollAsync(20)))\n  console.log(getCacheMap().get('20'))\n  console.log((await getDiceRollAsync(20)))\n  console.log(getCacheMap().get('20'))\n})()\n\nexport { }\n"],"names":["diceRollsCache","getCacheMap","hasCache","id","_a","addToCache","values","newValues","value","getFromCache","randomOrgQuotaUrl","format","randomOrgIntegerUrl","num","min","max","col","base","rnd","getRandomOrgQuota","quotaUrl","quotaText","hasRandomOrgQuota","quota","getRandomOrgRandomIntegers","randomIntegerUrl","randomIntegersArray","n","getRandomInclusive","getRandomIntegers","getDiceRollAsync","dice","randomOrgGeneratedValues","generatedValues","valueToCache"],"mappings":"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"}