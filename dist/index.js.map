{"version":3,"file":"index.js","sources":["../src/random-number-generators/JavascriptRandom.ts","../src/parsers/RollsProvider.ts","../src/utils/peaks.ts","../src/utils/sum.ts","../src/parsers/Parser.ts","../src/index.ts"],"sourcesContent":["import type {RandomIntegerParamsType} from '../types'\n\nconst getRandomInclusive = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1) + min)\nexport const getRandomIntegers = ({num = 20, min = 1, max = 20}: RandomIntegerParamsType = {}): number[] => Array.from({length: num}, () => getRandomInclusive(min, max))\n","import {getRandomIntegers} from '../random-number-generators/JavascriptRandom'\nimport {ExplodeUntilTypes} from \"../types\";\n\nconst diceRollsCache: Map<number, number[]> = new Map<number, number[]>()\n\nconst hasCache = (id: number): boolean => diceRollsCache.has(id) && !!diceRollsCache.get(id)?.length\nconst addToCache = (id: number, values: number[]): number | undefined => {\n  const newValues = [...values]\n\n  const value = newValues.pop()\n  diceRollsCache.set(id, newValues)\n\n  return value\n}\nconst getFromCache = (id: number): number | undefined => {\n  if (!hasCache(id)) return undefined\n\n  const values: number[] = [...(diceRollsCache.get(id) || [])]\n  const value = values.pop()\n\n  diceRollsCache.set(id, values)\n  return value\n}\n\nexport const getDiceRoll = (dice: number): number => {\n  const isCached: boolean = hasCache(dice)\n  if (isCached) return getFromCache(dice) as number\n\n  const generatedValues: number[] = getRandomIntegers({max: dice})\n  return addToCache(dice, generatedValues) as number\n}\nexport const getMultipleDiceRolls = (num: number, dice: number): number[] => Array.from({length: num}, () => getDiceRoll(dice))\n\nexport const getDiceRollUntil = (dice: number, targetType: ExplodeUntilTypes, target:number, outArray:number[] = []): number[] => {\n  const diceValue = getDiceRoll(dice);\n  const iterations = [...outArray, diceValue];\n  switch (targetType) {\n    case \"<\":\n      if (diceValue >= target) return iterations\n      return getDiceRollUntil(dice, targetType, target, iterations)\n    case \">\":\n      if (diceValue <= target) return iterations\n      return getDiceRollUntil(dice, targetType, target, iterations)\n    case \"=\":\n      if (diceValue === target) return  getDiceRollUntil(dice, targetType, target, iterations)\n      return iterations\n    case \"o\":\n      return [diceValue, getDiceRoll(dice)] as number[]\n  }\n}\n\nexport const getMultipleDiceRollsUntil = (dice: number, targetType: ExplodeUntilTypes, target:number, count: number) => {\n  let out:number[] = []\n  for (let i = 0; i < count; i++) {\n    out = [...out, ...getDiceRollUntil(dice, targetType, target)]\n  }\n  return out\n}","export const findSmallestN = (array: number[], count: number) => {\n    array.sort((a, b) =>  a - b);\n\n    return array.slice(0, count);\n}\n\nexport const findGreatestN = (array: number[], count: number) => {\n    array.sort((a, b) =>  b - a);\n\n    return array.slice(0, count);\n}","export const sumArray = (array: number[]) => array.reduce((res, num) => res + num, 0)","import type {ParseResultType} from '../types'\nimport {getDiceRollUntil, getMultipleDiceRolls, getMultipleDiceRollsUntil} from './RollsProvider'\nimport {DiceKeepTypes, ExplodeMap, ExplodeTypes, ExplodeUntilTypes} from \"../types\";\nimport {findGreatestN, findSmallestN} from \"../utils/peaks\";\nimport {sumArray} from \"../utils/sum\";\n\nconst ALL_TYPES_OF_DICE_REGEX = /(?:\\d+d\\d+)(?:rr|r|xo|x|kh|kl|dh|dl|min|max|even|odd|cs|cf)?(?:>=|<=|>|<|=)?\\d*/gim\nconst REROLL_DICE_REGEX = /^(\\d+)d(\\d+)(rr|r)(>=|<=|>|<)?(\\d+)$/gim\nconst EXPLODING_DICE_REGEX = /^(\\d+)d(\\d+)(x<|x>|xo|x)(\\d+)(kh|kl|dl|dh)?(\\d+)?$/gim\nconst STANDARD_DICE_REGEX = /^(\\d+)d(\\d+)(kh|kl|dl|dh)?(\\d+)?$/gim\n\nconst explodeToSignMap: ExplodeMap = {\n  x: '=',\n  'x<': '<',\n  'x>': '>',\n  'xo': 'o'\n}\n\nexport const parseOriginalString = (parsedObj: ParseResultType): ParseResultType => {\n  const {parsed, results} = parsedObj\n  let parsedWithResults = parsed\n\n  let lengthChanged = 0\n  for (let i = 0; i < results.length; i++) {\n    const res = results[i];\n    const {m, result, start, end} = res\n\n    if (typeof result === 'undefined') continue\n    parsedWithResults = parsedWithResults.substring(0, start - lengthChanged)\n      + result\n      + parsedWithResults.substring(end - lengthChanged, parsedWithResults.length)\n\n    lengthChanged += m.length - `${result}`.length\n  }\n  return {...parsedObj, parsed: parsedWithResults}\n}\n\nexport const rerollDiceParser = (parsedObj: ParseResultType): ParseResultType => {\n  const parsedResults = parsedObj.results.map((result) => {\n    const {m} = result\n    if (!m.match(REROLL_DICE_REGEX)) return result\n\n    const [_, numberOfDiceString, diceValueString, rerollString, operationString, rerollValueString] = REROLL_DICE_REGEX.exec(m) as RegExpExecArray\n    const numberOfDice = Number(numberOfDiceString)\n    const diceValue = Number(diceValueString)\n    const rerollValue = Number(rerollValueString)\n\n    const diceRolls = getMultipleDiceRolls(numberOfDice, diceValue)\n    return {...result, rolls: diceRolls, result: sumArray(diceRolls)}\n  })\n\n  return {...parsedObj, results: parsedResults}\n}\n\nexport const standardDiceParser = (parsedObj: ParseResultType): ParseResultType => {\n  const parsedResults = parsedObj.results.map((result) => {\n    const {m} = result\n    if (!m.match(STANDARD_DICE_REGEX)) return result\n\n    const [_, numberOfDiceString, diceValueString, keepType, keepCount] = STANDARD_DICE_REGEX.exec(m) as RegExpExecArray\n    const numberOfDice = Number(numberOfDiceString)\n    const diceValue = Number(diceValueString)\n\n    const diceRolls = getMultipleDiceRolls(numberOfDice, diceValue)\n    if (!keepType) return {...result, rolls: diceRolls, result: sumArray(diceRolls)}\n\n    return {\n      ...result,\n      rolls: diceRolls,\n      result: sumArray(keepDice(keepType as DiceKeepTypes, Number(keepCount ?? 1), diceRolls))\n    }\n  })\n\n  return {...parsedObj, results: parsedResults}\n}\n\nexport const keepDice = (keepType: DiceKeepTypes, keepCount: number, diceRolls: number[]) => {\n  if (keepType === 'kh') return findGreatestN(diceRolls, keepCount)\n  if (keepType === 'kl') return findSmallestN(diceRolls, keepCount)\n  if (keepType === 'dh') return findSmallestN(diceRolls, diceRolls.length - keepCount)\n  if (keepType === 'dl') return findGreatestN(diceRolls, diceRolls.length - keepCount)\n\n  return diceRolls\n}\n\nexport const explodingDiceParser = (parsedObj: ParseResultType): ParseResultType => {\n  const parsedResults = parsedObj.results.map((result) => {\n    const {m} = result\n    if (!m.match(EXPLODING_DICE_REGEX)) return result\n\n    const [_, numberOfDiceString, diceValueString, explodeType, targetNumberString, keepType, keepCount] = EXPLODING_DICE_REGEX.exec(m) as RegExpExecArray\n    const numberOfDice = Number(numberOfDiceString)\n    const diceValue = Number(diceValueString)\n    const targetNumber = Number(targetNumberString);\n\n    const diceRolls = getMultipleDiceRollsUntil(diceValue, explodeToSignMap[explodeType as keyof typeof explodeToSignMap], targetNumber, numberOfDice)\n\n    if (!keepType) {\n      return {...result, rolls: diceRolls, result: sumArray(diceRolls)}\n    }\n\n    return {\n      ...result,\n      rolls: diceRolls,\n      result: sumArray(keepDice(keepType as DiceKeepTypes, Number(keepCount ?? 1), diceRolls))\n    }\n  })\n\n  return {...parsedObj, results: parsedResults}\n}\n\nexport const parse = (text: string): ParseResultType => {\n  let parsedObj: ParseResultType = {original: text, parsed: text, wasSuccessful: true, results: []}\n\n  try {\n    parsedObj.results = Array.from(text.matchAll(ALL_TYPES_OF_DICE_REGEX), (m) => {\n      const res = m[0]\n      const {index: start} = m\n      const end = start as number + res.length\n\n      return {m: res, start, end}\n    })\n\n    parsedObj = explodingDiceParser(parsedObj)\n    parsedObj = rerollDiceParser(parsedObj)\n    parsedObj = standardDiceParser(parsedObj)\n\n    return parseOriginalString(parsedObj)\n  } catch (error) {\n    console.error(error)\n    parsedObj.wasSuccessful = false\n    return parsedObj\n  }\n}\n","import { parse } from './parsers/Parser'\n\n(async () => {\n  const testText = `\n    1d2 1d2 1d4 1d6 1d8 1d10 1d12 1d20 1d100 2d20 20d20 200d20\n    1d10r1 1d20r<10 1d20rr<3 5d10x10 1d20x<10kh 1d20x>10kh 6d10xo10 5d10xo<8x10cs>=8\n    3d10k 4d6k3 2d20kh 3d10kl 4d6kl3 2d20kl 3d6d 4d10d2 3d6dh 4d10min2 4d10max8\n    10d20cs20 10d20cs>10 6d10cs>=6 1d100cs<=20 3d6even 5d10cs>=6df=1\n    5d10cs>=8x=10 5d10cs>=8x>=9 10d10cs>=8x>=8 10d20cf20 10d20cf>10 6d10cf>=6\n    1d100cf<=20 4d6cs6df1 10d10cs>5df1 1d10cs=10df=1 3d6sf<3 3d6ms10\n    Ana are 1d6 mere.\n    Ion a luat 1d8 slashing dmg de la sapa.\n    1d6 + 2d4\n  `\n  const result = parse(testText)\n  // console.log(result.original)\n  // console.log(result.parsed)\n  console.log(result.results)\n})()\n\nexport { }\n"],"names":["getRandomInclusive","min","max","getRandomIntegers","num","diceRollsCache","hasCache","id","_a","addToCache","values","newValues","value","getFromCache","getDiceRoll","dice","generatedValues","getMultipleDiceRolls","getDiceRollUntil","targetType","target","outArray","diceValue","iterations","getMultipleDiceRollsUntil","count","out","i","findSmallestN","array","a","b","findGreatestN","sumArray","res","ALL_TYPES_OF_DICE_REGEX","REROLL_DICE_REGEX","EXPLODING_DICE_REGEX","STANDARD_DICE_REGEX","explodeToSignMap","parseOriginalString","parsedObj","parsed","results","parsedWithResults","lengthChanged","m","result","start","end","rerollDiceParser","parsedResults","_","numberOfDiceString","diceValueString","rerollString","operationString","rerollValueString","numberOfDice","diceRolls","standardDiceParser","keepType","keepCount","keepDice","explodingDiceParser","explodeType","targetNumberString","targetNumber","parse","text","error"],"mappings":"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"}