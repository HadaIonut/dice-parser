const a = /* @__PURE__ */ new Map(), s = () => a, m = (t) => {
  var e;
  return a.has(t) && !!((e = a.get(t)) != null && e.length);
}, d = (t, e) => {
  const o = [...e], n = o.pop();
  return a.set(t, o), n;
}, w = (t) => {
  if (!m(t))
    return;
  const e = [...a.get(t) || []], o = e.pop();
  return a.set(t, e), o;
}, h = (t = "plain") => `https://www.random.org/quota/?format=${t}`, p = ({
  num: t = 10,
  min: e = 1,
  max: o = 20,
  col: n = 1,
  base: r = 10,
  format: l = "plain",
  rnd: g = "new"
} = {}) => `https://www.random.org/integers/?num=${t}&min=${e}&max=${o}&col=${n}&base=${r}&format=${l}&rnd=${g}`, R = async () => {
  try {
    const t = h(), o = await (await fetch(t)).text();
    return Number(o);
  } catch {
    return NaN;
  }
}, y = async () => {
  const t = await R();
  return Number.isNaN(t) ? !1 : t > 1e3;
}, $ = async ({ num: t = 10, min: e = 1, max: o = 20 } = {}) => {
  if (!await y())
    return [];
  try {
    const r = p({ num: t, min: e, max: o }), u = (await (await fetch(r)).text()).split(`
`);
    return u.slice(0, u.length - 1).map((i) => Number(i));
  } catch {
    return [];
  }
}, c = async (t) => {
  const e = `${t}`;
  if (m(e))
    return w(e);
  const n = await $({ max: t });
  return d(e, n);
};
(async () => (console.log(s().get("20")), console.log(await c(20)), console.log(s().get("20")), console.log(await c(20)), console.log(s().get("20")), console.log(await c(20)), console.log(s().get("20"))))();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGljZS1wYXJzZXIuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXJzZXIvUGFyc2VyQ29tbW9uLnRzIiwiLi4vc3JjL3JhbmRvbS1udW1iZXJzL1JhbmRvbU9yZy50cyIsIi4uL3NyYy9wYXJzZXIvUGFyc2VyQXN5bmMudHMiLCIuLi9zcmMvZGljZS1wYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGljZVJvbGxzQ2FjaGU6IE1hcDxzdHJpbmcsIG51bWJlcltdPiA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXJbXT4oKVxuZXhwb3J0IGNvbnN0IGdldENhY2hlTWFwID0gKCk6IE1hcDxzdHJpbmcsIG51bWJlcltdPiA9PiBkaWNlUm9sbHNDYWNoZVxuXG5leHBvcnQgY29uc3QgaGFzQ2FjaGUgPSAoaWQ6IHN0cmluZyk6IGJvb2xlYW4gPT4gZGljZVJvbGxzQ2FjaGUuaGFzKGlkKSAmJiAhIWRpY2VSb2xsc0NhY2hlLmdldChpZCk/Lmxlbmd0aFxuZXhwb3J0IGNvbnN0IGFkZFRvQ2FjaGUgPSAoaWQ6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXSk6IG51bWJlciB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IG5ld1ZhbHVlcyA9IFsuLi52YWx1ZXNdXG5cbiAgY29uc3QgdmFsdWUgPSBuZXdWYWx1ZXMucG9wKClcbiAgZGljZVJvbGxzQ2FjaGUuc2V0KGlkLCBuZXdWYWx1ZXMpXG5cbiAgcmV0dXJuIHZhbHVlXG59XG5leHBvcnQgY29uc3QgZ2V0RnJvbUNhY2hlID0gKGlkOiBzdHJpbmcpOiBudW1iZXIgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAoIWhhc0NhY2hlKGlkKSkgcmV0dXJuIHVuZGVmaW5lZFxuXG4gIGNvbnN0IHZhbHVlczogbnVtYmVyW10gPSBbLi4uKGRpY2VSb2xsc0NhY2hlLmdldChpZCkgfHwgW10pXVxuICBjb25zdCB2YWx1ZSA9IHZhbHVlcy5wb3AoKVxuXG4gIGRpY2VSb2xsc0NhY2hlLnNldChpZCwgdmFsdWVzKVxuICByZXR1cm4gdmFsdWVcbn0iLCJpbXBvcnQgdHlwZSB7IFJhbmRvbU9yZ1JhbmRvbUludGVnZXJVcmxUeXBlLCBSYW5kb21JbnRlZ2VyUGFyYW1zVHlwZSB9IGZyb20gXCIuLi90eXBlc1wiXG5cbmNvbnN0IHJhbmRvbU9yZ1F1b3RhVXJsID0gKGZvcm1hdDogc3RyaW5nID0gJ3BsYWluJyk6IHN0cmluZyA9PiBgaHR0cHM6Ly93d3cucmFuZG9tLm9yZy9xdW90YS8/Zm9ybWF0PSR7Zm9ybWF0fWBcbmNvbnN0IHJhbmRvbU9yZ0ludGVnZXJVcmwgPSAoe1xuICBudW0gPSAxMCwgbWluID0gMSwgbWF4ID0gMjAsIGNvbCA9IDEsIGJhc2UgPSAxMCwgZm9ybWF0ID0gXCJwbGFpblwiLCBybmQgPSBcIm5ld1wiXG59OiBSYW5kb21PcmdSYW5kb21JbnRlZ2VyVXJsVHlwZSA9IHt9KTogc3RyaW5nID0+IGBodHRwczovL3d3dy5yYW5kb20ub3JnL2ludGVnZXJzLz9udW09JHtudW19Jm1pbj0ke21pbn0mbWF4PSR7bWF4fSZjb2w9JHtjb2x9JmJhc2U9JHtiYXNlfSZmb3JtYXQ9JHtmb3JtYXR9JnJuZD0ke3JuZH1gXG5cbmNvbnN0IGdldFJhbmRvbU9yZ1F1b3RhID0gYXN5bmMgKCk6IFByb21pc2U8bnVtYmVyPiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcXVvdGFVcmwgPSByYW5kb21PcmdRdW90YVVybCgpXG4gICAgY29uc3QgcXVvdGFSZXN1bHQgPSBhd2FpdCBmZXRjaChxdW90YVVybClcbiAgICBjb25zdCBxdW90YVRleHQgPSBhd2FpdCBxdW90YVJlc3VsdC50ZXh0KClcblxuICAgIHJldHVybiBOdW1iZXIocXVvdGFUZXh0KVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBOYU5cbiAgfVxufVxuXG5jb25zdCBoYXNSYW5kb21PcmdRdW90YSA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgY29uc3QgcXVvdGEgPSBhd2FpdCBnZXRSYW5kb21PcmdRdW90YSgpXG4gIHJldHVybiBOdW1iZXIuaXNOYU4ocXVvdGEpID8gZmFsc2UgOiBxdW90YSA+IDEwMDBcbn1cblxuZXhwb3J0IGNvbnN0IGdldFJhbmRvbU9yZ1JhbmRvbUludGVnZXJzID0gYXN5bmMgKHsgbnVtID0gMTAsIG1pbiA9IDEsIG1heCA9IDIwIH06IFJhbmRvbUludGVnZXJQYXJhbXNUeXBlID0ge30pOiBQcm9taXNlPG51bWJlcltdPiA9PiB7XG4gIGNvbnN0IHF1b3RhID0gYXdhaXQgaGFzUmFuZG9tT3JnUXVvdGEoKVxuICBpZiAoIXF1b3RhKSByZXR1cm4gW11cblxuICB0cnkge1xuICAgIGNvbnN0IHJhbmRvbUludGVnZXJVcmwgPSByYW5kb21PcmdJbnRlZ2VyVXJsKHsgbnVtLCBtaW4sIG1heCB9KVxuICAgIGNvbnN0IHJhbmRvbUludGVnZXJzUmVzdWx0ID0gYXdhaXQgZmV0Y2gocmFuZG9tSW50ZWdlclVybClcbiAgICBjb25zdCByYW5kb21JbnRlZ2Vyc1RleHQgPSBhd2FpdCByYW5kb21JbnRlZ2Vyc1Jlc3VsdC50ZXh0KClcblxuICAgIGNvbnN0IHJhbmRvbUludGVnZXJzQXJyYXkgPSByYW5kb21JbnRlZ2Vyc1RleHQuc3BsaXQoJ1xcbicpXG4gICAgcmV0dXJuIHJhbmRvbUludGVnZXJzQXJyYXkuc2xpY2UoMCwgcmFuZG9tSW50ZWdlcnNBcnJheS5sZW5ndGggLSAxKS5tYXAoKG4pID0+IE51bWJlcihuKSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gW11cbiAgfVxufSIsImltcG9ydCB7IGhhc0NhY2hlLCBnZXRGcm9tQ2FjaGUsIGFkZFRvQ2FjaGUgfSBmcm9tIFwiLi9QYXJzZXJDb21tb25cIlxuaW1wb3J0IHsgZ2V0UmFuZG9tT3JnUmFuZG9tSW50ZWdlcnMgfSBmcm9tIFwiLi4vcmFuZG9tLW51bWJlcnMvUmFuZG9tT3JnXCJcblxuZXhwb3J0IGNvbnN0IGdldERpY2VSb2xsQXN5bmMgPSBhc3luYyAoZGljZTogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+ID0+IHtcbiAgY29uc3QgaWQ6IHN0cmluZyA9IGAke2RpY2V9YFxuXG4gIGNvbnN0IGlzQ2FjaGVkOiBib29sZWFuID0gaGFzQ2FjaGUoaWQpXG4gIGlmIChpc0NhY2hlZCkgcmV0dXJuIGdldEZyb21DYWNoZShpZCkgYXMgbnVtYmVyXG5cbiAgY29uc3QgZ2VuZXJhdGVkVmFsdWVzOiBudW1iZXJbXSA9IGF3YWl0IGdldFJhbmRvbU9yZ1JhbmRvbUludGVnZXJzKHttYXg6IGRpY2V9KVxuICBjb25zdCBkaWNlVmFsdWU6IG51bWJlciA9IGFkZFRvQ2FjaGUoaWQsIGdlbmVyYXRlZFZhbHVlcykgYXMgbnVtYmVyXG5cbiAgcmV0dXJuIGRpY2VWYWx1ZVxufSIsImltcG9ydCB7IGdldENhY2hlTWFwIH0gZnJvbSBcIi4vcGFyc2VyL1BhcnNlckNvbW1vblwiXG5pbXBvcnQgeyBnZXREaWNlUm9sbEFzeW5jIH0gZnJvbSBcIi4vcGFyc2VyL1BhcnNlckFzeW5jXCJcblxuKGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coZ2V0Q2FjaGVNYXAoKS5nZXQoJzIwJykpXG4gIGNvbnNvbGUubG9nKChhd2FpdCBnZXREaWNlUm9sbEFzeW5jKDIwKSkpXG4gIGNvbnNvbGUubG9nKGdldENhY2hlTWFwKCkuZ2V0KCcyMCcpKVxuICBjb25zb2xlLmxvZygoYXdhaXQgZ2V0RGljZVJvbGxBc3luYygyMCkpKVxuICBjb25zb2xlLmxvZyhnZXRDYWNoZU1hcCgpLmdldCgnMjAnKSlcbiAgY29uc29sZS5sb2coKGF3YWl0IGdldERpY2VSb2xsQXN5bmMoMjApKSlcbiAgY29uc29sZS5sb2coZ2V0Q2FjaGVNYXAoKS5nZXQoJzIwJykpXG59KSgpXG5cbmV4cG9ydCB7IH0iXSwibmFtZXMiOlsiZGljZVJvbGxzQ2FjaGUiLCJnZXRDYWNoZU1hcCIsImhhc0NhY2hlIiwiaWQiLCJfYSIsImFkZFRvQ2FjaGUiLCJ2YWx1ZXMiLCJuZXdWYWx1ZXMiLCJ2YWx1ZSIsImdldEZyb21DYWNoZSIsInJhbmRvbU9yZ1F1b3RhVXJsIiwiZm9ybWF0IiwicmFuZG9tT3JnSW50ZWdlclVybCIsIm51bSIsIm1pbiIsIm1heCIsImNvbCIsImJhc2UiLCJybmQiLCJnZXRSYW5kb21PcmdRdW90YSIsInF1b3RhVXJsIiwicXVvdGFUZXh0IiwiaGFzUmFuZG9tT3JnUXVvdGEiLCJxdW90YSIsImdldFJhbmRvbU9yZ1JhbmRvbUludGVnZXJzIiwicmFuZG9tSW50ZWdlclVybCIsInJhbmRvbUludGVnZXJzQXJyYXkiLCJuIiwiZ2V0RGljZVJvbGxBc3luYyIsImRpY2UiLCJnZW5lcmF0ZWRWYWx1ZXMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLHdCQUE0QyxPQUNyQ0MsSUFBYyxNQUE2QkQsR0FFM0NFLElBQVcsQ0FBQ0M7QUFIekIsTUFBQUM7QUFHaUQsU0FBQUosRUFBZSxJQUFJRyxDQUFFLEtBQUssQ0FBQyxHQUFDQyxJQUFBSixFQUFlLElBQUlHLENBQUUsTUFBckIsUUFBQUMsRUFBd0I7QUFBQSxHQUN4RkMsSUFBYSxDQUFDRixHQUFZRyxNQUF5QztBQUN4RSxRQUFBQyxJQUFZLENBQUMsR0FBR0QsQ0FBTSxHQUV0QkUsSUFBUUQsRUFBVTtBQUNULFNBQUFQLEVBQUEsSUFBSUcsR0FBSUksQ0FBUyxHQUV6QkM7QUFDVCxHQUNhQyxJQUFlLENBQUNOLE1BQW1DO0FBQzFELE1BQUEsQ0FBQ0QsRUFBU0MsQ0FBRTtBQUFVO0FBRXBCLFFBQUFHLElBQW1CLENBQUMsR0FBSU4sRUFBZSxJQUFJRyxDQUFFLEtBQUssQ0FBQSxDQUFHLEdBQ3JESyxJQUFRRixFQUFPO0FBRU4sU0FBQU4sRUFBQSxJQUFJRyxHQUFJRyxDQUFNLEdBQ3RCRTtBQUNULEdDbEJNRSxJQUFvQixDQUFDQyxJQUFpQixZQUFvQix3Q0FBd0NBLEtBQ2xHQyxJQUFzQixDQUFDO0FBQUEsRUFDM0IsS0FBQUMsSUFBTTtBQUFBLEVBQUksS0FBQUMsSUFBTTtBQUFBLEVBQUcsS0FBQUMsSUFBTTtBQUFBLEVBQUksS0FBQUMsSUFBTTtBQUFBLEVBQUcsTUFBQUMsSUFBTztBQUFBLEVBQUksUUFBQU4sSUFBUztBQUFBLEVBQVMsS0FBQU8sSUFBTTtBQUMzRSxJQUFtQyxDQUFBLE1BQWUsd0NBQXdDTCxTQUFXQyxTQUFXQyxTQUFXQyxVQUFZQyxZQUFlTixTQUFjTyxLQUU5SkMsSUFBb0IsWUFBNkI7QUFDakQsTUFBQTtBQUNGLFVBQU1DLElBQVdWLEtBRVhXLElBQVksT0FERSxNQUFNLE1BQU1ELENBQVEsR0FDSjtBQUVwQyxXQUFPLE9BQU9DLENBQVM7QUFBQTtBQUVoQixXQUFBO0FBQUEsRUFDVDtBQUNGLEdBRU1DLElBQW9CLFlBQThCO0FBQ2hELFFBQUFDLElBQVEsTUFBTUo7QUFDcEIsU0FBTyxPQUFPLE1BQU1JLENBQUssSUFBSSxLQUFRQSxJQUFRO0FBQy9DLEdBRWFDLElBQTZCLE9BQU8sRUFBRSxLQUFBWCxJQUFNLElBQUksS0FBQUMsSUFBTSxHQUFHLEtBQUFDLElBQU0sR0FBZ0MsSUFBQSxPQUEwQjtBQUVwSSxNQUFJLENBRFUsTUFBTU87QUFDUixXQUFPO0FBRWYsTUFBQTtBQUNGLFVBQU1HLElBQW1CYixFQUFvQixFQUFFLEtBQUFDLEdBQUssS0FBQUMsR0FBSyxLQUFBQyxHQUFLLEdBSXhEVyxLQUZxQixPQURFLE1BQU0sTUFBTUQsQ0FBZ0IsR0FDSCxRQUVQLE1BQU07QUFBQSxDQUFJO0FBQ3pELFdBQU9DLEVBQW9CLE1BQU0sR0FBR0EsRUFBb0IsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDQyxNQUFNLE9BQU9BLENBQUMsQ0FBQztBQUFBO0FBRXhGLFdBQU87RUFDVDtBQUNGLEdDbkNhQyxJQUFtQixPQUFPQyxNQUFrQztBQUN2RSxRQUFNMUIsSUFBYSxHQUFHMEI7QUFHbEIsTUFEc0IzQixFQUFTQyxDQUFFO0FBQ3ZCLFdBQU9NLEVBQWFOLENBQUU7QUFFcEMsUUFBTTJCLElBQTRCLE1BQU1OLEVBQTJCLEVBQUMsS0FBS0ssRUFBSyxDQUFBO0FBR3ZFLFNBRm1CeEIsRUFBV0YsR0FBSTJCLENBQWU7QUFHMUQ7QUFBQSxDQ1ZDLGFBQ0MsUUFBUSxJQUFJN0IsRUFBQSxFQUFjLElBQUksSUFBSSxDQUFDLEdBQ25DLFFBQVEsSUFBSyxNQUFNMkIsRUFBaUIsRUFBRSxDQUFFLEdBQ3hDLFFBQVEsSUFBSTNCLEVBQUEsRUFBYyxJQUFJLElBQUksQ0FBQyxHQUNuQyxRQUFRLElBQUssTUFBTTJCLEVBQWlCLEVBQUUsQ0FBRSxHQUN4QyxRQUFRLElBQUkzQixFQUFBLEVBQWMsSUFBSSxJQUFJLENBQUMsR0FDbkMsUUFBUSxJQUFLLE1BQU0yQixFQUFpQixFQUFFLENBQUUsR0FDeEMsUUFBUSxJQUFJM0IsRUFBQSxFQUFjLElBQUksSUFBSSxDQUFDLElBQ2xDOyJ9
